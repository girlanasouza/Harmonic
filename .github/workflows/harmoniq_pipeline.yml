name: Deploy project

on:
  push:
    branches:
      - production

jobs:
  lint_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependences
        run: cd backend && npm install
      - name: Run eslint
        run: cd backend && npm run lint
      - name: check-lint
        if: failure()
        run: echo "Eslint encontrou observacoes no codigo, revisar!!"
  test_backend:
    needs: lint_backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependences
        run: cd backend && npm install
      - name: Run jest
        run: cd backend && export PRISMA_QUERY_ENGINE_LIBRARY="node_modules/.prisma/client/libquery_engine-debian-openssl-1.1.x.so.node" && npm run test --verbose
  lint_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependences
        run: cd frontend && npm install
      - name: Run eslint
        run: cd frontend && npm run lint
      - name: check-lint
        if: failure()
        run: echo "Eslint encontrou observacoes no codigo, revisar!!"
  test_frontend:
    needs: lint_frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependences
        run: cd frontend && npm install
      - name: Run jest
        run: cd frontend && npm run test --verbose

  build_and_push_prod:
    needs: [test_backend, test_frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push prod_backend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/harmoniq_backend:latest -f ./backend/Dockerfile ./backend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/harmoniq_backend:latest

      - name: Build and push prod_frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/harmoniq_frontend:latest -f ./frontend/Dockerfile ./frontend
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/harmoniq_frontend:latest
